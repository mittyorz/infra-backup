#!/bin/sh

set -u

usage () {
    cat <<'EOF'
usage: $0 [-c config file] [-L lockdir] [-s target pool/dataset name] [-d dump dest dir] [-b state file dir]
          [-i full dump interval] [-z] [-u 0077]

 -c: specify configuration file path

 -L: specify lock directory path
     default is '/var/lock/zfs.dump.lock'

 -s: target ZFS pool/dataset name

 -d: directory path to store dump data

 -b: directory path to store state file
     default is '/var/lib/zfs-dump'

 -i: full dump interval: 'monthly' 'weekly' 'daily'
     default is 'monthly'

 -z: use pzstd to compress dump data
     default is 'false'

 -u: set umask
     detault is '0077'

EOF
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

warn () {
    >&2 echo "$0: $@"
}

isexist () {
    [ -e "$1" ] && return 0
    warn "$1 does not exist"
    exit 1
}


# parse commandline arguments
while getopts "c:L:s:d:b:i:zu:" OPT; do
    case $OPT in
        c)  CONFFILE="$OPTARG"
            isexist "$CONFFILE"
            # load configuration
            . $CONFFILE
            ;;
        L)  LOCKDIR="$OPTARG"
            ;;
        s)  TARGETNAME="$OPTARG"
            ;;
        d)  DSTPATH="$OPTARG"
            ;;
        b)  STATEDIR="$OPTARG"
            ;;
        i)  INTERVAL="$OPTARG"
            ;;
        z)  ZSTD="true"
            ;;
        u)  UMASK="$OPTARG"
            ;;
    esac
done
shift $(( $OPTIND - 1 ))


# check configuration and set default
checkvar () {
    unset _checkvar
    set +u
    eval "_checkvar=\$$1"
    set -u
    if [ -z "$_checkvar" ]; then
        if [ $# -eq 2 ]; then
            eval "$1=\"$2\""
        else
            warn "$1 is need to be set"
            exit 1
        fi
    fi
}


# check configrations and set default value if not yet
checkvar LOCKDIR "/var/lock/zfs.dump.lock"
checkvar TARGETNAME
checkvar DSTPATH
checkvar STATEDIR "/var/lib/zfs-dump"
checkvar INTERVAL "monthly"
checkvar ZSTD "false"
checkvar UMASK "0077"

isexist "$DSTPATH"
isexist "$STATEDIR"


# incremental or full dump
FULLDUMP="false"
if [ $INTERVAL = "daily" ]; then
    FULLDUMP="true"
elif [ $INTERVAL = "weekly" ]; then
    if [ `date +%u` = "1" ]; then
        # full dump on Monday
        FULLDUMP="true"
    fi
elif [ $INTERVAL = "monthly" ]; then
    if [ `date +%d` = "1" ]; then
        # full dump on 1st day of month
        FULLDUMP="true"
    fi
else
    warn "full dump interval must be 'monthly', 'weekly' or 'daily': '$INTERVAL'"
    exit 1
fi


# check snapshot existence
if [ `zfs list -H -t snapshot -o name -s creation $TARGETNAME | wc -l` -lt 1 ]; then
    warn "no enough snapshot on '$TARGETNAME'"
    exit 1
fi
if [ `zfs list -H -t snapshot -o name -s creation $TARGETNAME | wc -l` -eq 1 ]; then
    warn "only one snapshot exists on '$TARGETNAME', make full dump"
    FULLDUMP="true"
fi


# read state file and check latest snapshot
STATEFILE=$(echo $TARGETNAME | sed -e 's#/#_#g')
if [ "$FULLDUMP" = "false" ]; then
    if [ ! -e "$STATEDIR/$STATEFILE" ]; then
        warn "state file does not exist: $STATEDIR/$STATEFILE, make full dump"
        FULLDUMP="true"
    else
        LATESTSNAP=$(cat $STATEDIR/$STATEFILE)
        if [ -z "$LATESTSNAP" ]; then
            warn "state file is empty: $STATEDIR/$STATEFILE"
            exit 1
        else
            if [ `zfs list -H -t snapshot -o name -s creation $TARGETNAME | grep -c "^${LATESTSNAP}$"` -ne 1 ]; then
                warn "latest snapshot name '$LATESTSNAP' does not exist on '$TARGETNAME'"
                exit 1
            fi
            if [ `zfs list -H -t snapshot -o name -s creation $TARGETNAME | tail -1` = "$LATESTSNAP" ]; then
                warn "no snapshot newer than '$LATESTSNAP' found on '$TARGETNAME'"
                exit 1
            fi
        fi
    fi
fi


# set lock
cleanup () {
    rmdir $LOCKDIR
    exit
}

mkdir $LOCKDIR || exit 1
trap exit HUP INT QUIT PIPE TERM
trap cleanup EXIT


# set zfs stream file name and zfs exec arguments
SNAPNAME=$(zfs list -H -t snapshot -o name -s creation $TARGETNAME | tail -1)
if [ "$FULLDUMP" = "true" ]; then
    FILENAME=$(echo "${SNAPNAME}.full.zfs" | sed -e 's#/#_#g')
    ZFS_CMD="zfs send $SNAPNAME"
else
    FILENAME=$(echo "${LATESTSNAP}~${SNAPNAME}.incremental.zfs" | sed -e 's#/#_#g')
    ZFS_CMD="zfs send -i $LATESTSNAP $SNAPNAME"
fi

if [ "$ZSTD" = "true" ]; then
    FILENAME="${FILENAME}.zst"
    ZFS_CMD="${ZFS_CMD} | pzstd"
fi


# make zfs stream file
if [ -e "$DSTPATH/$FILENAME" ]; then
    warn "$DSTPATH/$FILENAME already exists"
    exit 1
fi

UMASK_ORIG=$(umask)
umask $UMASK
eval "${ZFS_CMD} > $DSTPATH/$FILENAME"

umask $UMASK_ORIG
echo "$SNAPNAME" > $STATEDIR/$STATEFILE

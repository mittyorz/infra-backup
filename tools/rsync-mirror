#!/bin/sh

set -u

usage () {
    cat <<'EOF'
usage: $0 [-c config file] [-h source host] [-p source path] [-u url to last update info]
          [-d dest dir path] [-o rsync option] [-l logfile] [-L lock dir]

 -c: specify configuration file path

 -h: specify hostname serves original data

 -p: specify module and path name of source host

 -u: url that returns last update date

 -d: local directory path to store data

 -o: specify rsync option
     default is "--quiet -rlpt --hard-links --delete --delete-after --safe-links --timeout 600"

 -l: specify log file path
     default is '/var/log/rsync/mirror.`hostname`_`path`.log'

 -L: specify lock directory path
     default is '/var/lock/mirror.`hostname`_`path`.lock'

EOF
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

warn () {
    >&2 echo "$0: $@"
}

isexist () {
    [ -e "$1" ] && return 0
    warn "$1 does not exist"
    exit 1
}


# parse commandline arguments
while getopts "c:h:p:u:d:o:l:L:" OPT; do
    case $OPT in
        c)  CONFFILE="$OPTARG"
            isexist "$CONFFILE"
            # load configuration
            . $CONFFILE
            ;;
        h)  SRCHOST="$OPTARG"
            ;;
        p)  SRCPATH="$OPTARG"
            ;;
        u)  LASTUPDATE="$OPTARG"
            ;;
        d)  DSTPATH="$OPTARG"
            ;;
        o)  RSYNCOPT="$OPTARG"
            ;;
        l)  RSYNCLOG="$OPTARG"
            ;;
        L)  LOCKDIR="$OPTARG"
            ;;
    esac
done
shift $(( $OPTIND - 1 ))


# check configuration and set default
checkvar () {
    unset _checkvar
    set +u
    eval "_checkvar=\$$1"
    set -u
    if [ -z "$_checkvar" ]; then
        if [ $# -eq 2 ]; then
            eval "$1=\"$2\""
        else
            warn "$1 is need to be set"
            exit 1
        fi
    fi
}


# check configrations and set default value if not yet
checkvar LASTUPDATE ""
checkvar SRCHOST
checkvar SRCPATH
checkvar DSTPATH
checkvar RSYNCOPT "--quiet -rlpt --hard-links --delete --delete-after --safe-links --timeout 600"

__SRCPATH=$(echo $SRCPATH | tr '/' '_')

checkvar RSYNCLOG "/var/log/rsync/mirror.${SRCHOST}_${__SRCPATH}.log"
checkvar LOCKDIR "/var/lock/mirror.${SRCHOST}_${__SRCPATH}.lock"

isexist "$DSTPATH"


# check connectivity of host
ping -c 1 $SRCHOST > /dev/null
if [ $? -ne 0 ]; then
    warn "$SRCHOST seems to be down (ping)"
    exit 1
fi


# set lock
cleanup () {
    rmdir $LOCKDIR
    exit
}

mkdir $LOCKDIR || exit 1
trap exit HUP INT QUIT PIPE TERM
trap cleanup EXIT


# ready to rsync
rsync --log-file=$RSYNCLOG $RSYNCOPT \
    $SRCHOST::$SRCPATH $DSTPATH

if [ $? -ne 0 ]; then
    warn "something wrong on rsync"
    exit 1
fi
